package cn.learn.Data.Basic.Tree;
/*
    多叉树：
        在二叉树中，每个节点有数据项，最多两个子节点。如果允许每个节点可以有更多的数据项和更多的子节点，就是多叉树
        后面我们讲解的2-3树，2-3-4树就是多叉树，多叉树通过重新组织节点，减少树的高度，能对二叉树进行优化
        举例说明【下面2-3树就是一棵多叉树】
    B树的基本介绍：
        B树通过重新组织节点，降低树的高度，并且减少IO读写次数来提升效率
        文件系统及数据库系统的设计者利用了磁盘预读原理，将一个节点的大小设为等于一个页（通常为4K）这样每个节点
    只需要一次IO就可以完全载入
        将树的度M设置为1024，在600亿个元素中最多只需要4次IO操作就可以读取到想要的元素，B树广泛应用于文件存储
    系统以及数据库系统中

    2-3树是最简单的B树结构
        2-3树的所有叶子节点都在同一层（只要是B树都满足这个条件）
        有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点
        有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点
        2-3树是由二节点和三节点构成的树

        插入规则：
            2-3树的所有叶子节点都在同一层（只要是B树都满足这个条件）
            有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点
            有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点
            当按照规则插入一个数到某个节点是，不能满足上面三个要求，就需要拆，先向上拆，如果上层满
        则拆本层，拆后仍然需要满足上面三个条件
            对于三节点的子树的值大小仍然遵守（BST二叉排序树）的规则

    B树的说明：
        B树的阶：节点的最多子节点个数，比如2-3数的阶是3，2-3-4数的阶是4
        B数的搜索，从根节点开始，对节点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字
    所属范围的儿子节点；重复知道对应的儿子指针为空，或者已经是叶子节点
        关键字集合分布在整棵树中，即叶子节点和非叶子节点都存放数据
        搜索有可能在非叶子节点结束
        其搜索性能等价于在关键字全集内做一次二分查找

     B+树的说明：是B树的变体，也是一种多路径搜索树
        B+树的搜索与B树也基本相同，区别是B+树只有达到叶子节点才命中（B树可以在非叶子节点命中）其性能也等价于
     在关键字全集做一次二分查找
        所有【关键字都出现在叶子节点的链表中】（即数据只能在叶子节点【也叫稠密索引】），且链表中的关键字数据
     恰好是有序的
        不可能在非叶子节点命中
        非叶子节点相当于是叶子节点的索引（稀疏索引）叶子节点相当于是存储（关键字）数据的数据层
        更适合文件索引系统
        B树和B+树各自有自己的应用场景，不能说B+树完全比B树好，反之亦然

     B*树的说明：是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针
        B*树定义了非叶子节点关键字个数至少为（2/3）*M，即块的最低使用率为2/3，二B+树的块的最低使用率为B+树的1/2
        从第一个特点我们可以看出，B*树分配新节点的概率比B+树要低，空间使用率更高
*/

public class MultiwayTree {
}
